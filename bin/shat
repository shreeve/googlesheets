#!/usr/bin/env ruby

STDOUT.sync = true

begin
  require "censive"
rescue LoadError
  abort "#{File.basename($0)} needs another gem, run 'gem install censive'"
end

require "googlesheets"
require "optparse"

trap("INT" ) { abort "\n" }

OptionParser.new.instance_eval do
  @banner  = "usage: #{program_name} [options] <url>"

  on "-f", "--fill"   , "Fill each row with as many cells as the first row"
  on "-h", "--help"   , "Show help and command usage" do Kernel.abort to_s; end
  on "-s", "--strip"  , "Strip leading and trailing whitespace"
  on "-v", "--version", "Show version number" do Kernel.abort "#{program_name} #{GoogleSheets::VERSION}"; end

  on       "--csv"    , "Output comma separated data (default)"
  on       "--psv"    , "Output pipe separated data"
  on       "--tsv"    , "Output tab separated data"

  Kernel.abort to_s if ARGV.empty?
  self
end.parse!(into: opts={}) rescue abort($!.message)

fill = opts[:fill]
link = ARGV.shift or abort("no url provided")
trim = opts[:trim]

# handle separators
xcsv = opts[:csv ]
xpsv = opts[:psv ]
xtsv = opts[:tsv ]
hits = [xcsv, xpsv, xtsv].compact.size
hits > 1 and abort "only one of csv, psv, or tsv allowed"
xcsv = true if hits.zero?
seps = xtsv ? "\t" : xpsv ? "|" : ","

goog = GoogleSheets.new(link)
rows = goog.sheet_read
rows.each {|cols| cols.map(&:strip!) } if trim

if fill and need = rows[0]&.size
  rows.each_with_index do |cols, i|
    if (size = cols.size) != need
      abort "row #{i + 1} has more columns than the header row" if size > need
      cols.concat(Array.new(need - size, ""))
    end
  end
end

Censive.write {|csv| rows.each {|row| csv << row }}
